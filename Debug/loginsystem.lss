
loginsystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000260e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  0000260e  000026a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800114  00800114  00002756  2**0
                  ALLOC
  3 .stab         00002064  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e51  00000000  00000000  000047bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000560d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000574d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000058bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000083f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000091a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009300  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000958d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009d5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <main>
      8a:	0c 94 05 13 	jmp	0x260a	; 0x260a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ef       	ldi	r26, 0xF0	; 240
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ef       	ldi	r24, 0xF0	; 240
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPinValue>:




void DIO_voidSetPinValue(u8 Copy_u8Portnumber , u8 Copyu8Pinnumber , u8 Copyu8Value)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	29 97       	sbiw	r28, 0x09	; 9
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
   switch(Copyu8Value)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	39 87       	std	Y+9, r19	; 0x09
     b68:	28 87       	std	Y+8, r18	; 0x08
     b6a:	88 85       	ldd	r24, Y+8	; 0x08
     b6c:	99 85       	ldd	r25, Y+9	; 0x09
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	39 f0       	breq	.+14     	; 0xb80 <DIO_voidSetPinValue+0x3a>
     b72:	28 85       	ldd	r18, Y+8	; 0x08
     b74:	39 85       	ldd	r19, Y+9	; 0x09
     b76:	21 30       	cpi	r18, 0x01	; 1
     b78:	31 05       	cpc	r19, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <DIO_voidSetPinValue+0x38>
     b7c:	75 c0       	rjmp	.+234    	; 0xc68 <DIO_voidSetPinValue+0x122>
     b7e:	e2 c0       	rjmp	.+452    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
   {
    case LOW :
              switch(Copy_u8Portnumber)
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	3f 83       	std	Y+7, r19	; 0x07
     b88:	2e 83       	std	Y+6, r18	; 0x06
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	59 f1       	breq	.+86     	; 0xbea <DIO_voidSetPinValue+0xa4>
     b94:	2e 81       	ldd	r18, Y+6	; 0x06
     b96:	3f 81       	ldd	r19, Y+7	; 0x07
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	2c f4       	brge	.+10     	; 0xba8 <DIO_voidSetPinValue+0x62>
     b9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ba0:	9f 81       	ldd	r25, Y+7	; 0x07
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	69 f0       	breq	.+26     	; 0xbc0 <DIO_voidSetPinValue+0x7a>
     ba6:	ce c0       	rjmp	.+412    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
     ba8:	2e 81       	ldd	r18, Y+6	; 0x06
     baa:	3f 81       	ldd	r19, Y+7	; 0x07
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	89 f1       	breq	.+98     	; 0xc14 <DIO_voidSetPinValue+0xce>
     bb2:	8e 81       	ldd	r24, Y+6	; 0x06
     bb4:	9f 81       	ldd	r25, Y+7	; 0x07
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_voidSetPinValue+0x78>
     bbc:	40 c0       	rjmp	.+128    	; 0xc3e <DIO_voidSetPinValue+0xf8>
     bbe:	c2 c0       	rjmp	.+388    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
              {
                case PORTA:
                CLR_BIT(PORTA_REG,Copyu8Pinnumber);
     bc0:	ab e3       	ldi	r26, 0x3B	; 59
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	eb e3       	ldi	r30, 0x3B	; 59
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_voidSetPinValue+0x98>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_voidSetPinValue+0x94>
     be2:	80 95       	com	r24
     be4:	84 23       	and	r24, r20
     be6:	8c 93       	st	X, r24
     be8:	ad c0       	rjmp	.+346    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
                break;
                case PORTB:
                CLR_BIT(PORTB_REG,Copyu8Pinnumber);
     bea:	a8 e3       	ldi	r26, 0x38	; 56
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e8 e3       	ldi	r30, 0x38	; 56
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	02 2e       	mov	r0, r18
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <DIO_voidSetPinValue+0xc2>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <DIO_voidSetPinValue+0xbe>
     c0c:	80 95       	com	r24
     c0e:	84 23       	and	r24, r20
     c10:	8c 93       	st	X, r24
     c12:	98 c0       	rjmp	.+304    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
                break;
                case PORTC:
                CLR_BIT(PORTC_REG,Copyu8Pinnumber);
     c14:	a5 e3       	ldi	r26, 0x35	; 53
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e5 e3       	ldi	r30, 0x35	; 53
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <DIO_voidSetPinValue+0xec>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <DIO_voidSetPinValue+0xe8>
     c36:	80 95       	com	r24
     c38:	84 23       	and	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	83 c0       	rjmp	.+262    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
                break;
                case PORTD :
                CLR_BIT(PORTD_REG,Copyu8Pinnumber);
     c3e:	a2 e3       	ldi	r26, 0x32	; 50
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e2 e3       	ldi	r30, 0x32	; 50
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_voidSetPinValue+0x116>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_voidSetPinValue+0x112>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	6e c0       	rjmp	.+220    	; 0xd44 <DIO_voidSetPinValue+0x1fe>

              }

              break;
    case HIGH:
              switch(Copy_u8Portnumber)
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3d 83       	std	Y+5, r19	; 0x05
     c70:	2c 83       	std	Y+4, r18	; 0x04
     c72:	8c 81       	ldd	r24, Y+4	; 0x04
     c74:	9d 81       	ldd	r25, Y+5	; 0x05
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	91 05       	cpc	r25, r1
     c7a:	49 f1       	breq	.+82     	; 0xcce <DIO_voidSetPinValue+0x188>
     c7c:	2c 81       	ldd	r18, Y+4	; 0x04
     c7e:	3d 81       	ldd	r19, Y+5	; 0x05
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <DIO_voidSetPinValue+0x14a>
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	61 f0       	breq	.+24     	; 0xca6 <DIO_voidSetPinValue+0x160>
     c8e:	5a c0       	rjmp	.+180    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
     c90:	2c 81       	ldd	r18, Y+4	; 0x04
     c92:	3d 81       	ldd	r19, Y+5	; 0x05
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <DIO_voidSetPinValue+0x1b0>
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	9d 81       	ldd	r25, Y+5	; 0x05
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <DIO_voidSetPinValue+0x1d8>
     ca4:	4f c0       	rjmp	.+158    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
              {
                case PORTA:
                SET_BIT(PORTA_REG,Copyu8Pinnumber);
     ca6:	ab e3       	ldi	r26, 0x3B	; 59
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	eb e3       	ldi	r30, 0x3B	; 59
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <DIO_voidSetPinValue+0x17e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <DIO_voidSetPinValue+0x17a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	3b c0       	rjmp	.+118    	; 0xd44 <DIO_voidSetPinValue+0x1fe>
                break;
                case PORTB:
                SET_BIT(PORTB_REG,Copyu8Pinnumber);
     cce:	a8 e3       	ldi	r26, 0x38	; 56
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e8 e3       	ldi	r30, 0x38	; 56
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_voidSetPinValue+0x1a6>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_voidSetPinValue+0x1a2>
     cf0:	84 2b       	or	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	27 c0       	rjmp	.+78     	; 0xd44 <DIO_voidSetPinValue+0x1fe>
                break;
                case PORTC:
                SET_BIT(PORTC_REG,Copyu8Pinnumber);
     cf6:	a5 e3       	ldi	r26, 0x35	; 53
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e5 e3       	ldi	r30, 0x35	; 53
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_voidSetPinValue+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_voidSetPinValue+0x1ca>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	13 c0       	rjmp	.+38     	; 0xd44 <DIO_voidSetPinValue+0x1fe>
                break;
                case PORTD :
                SET_BIT(PORTD_REG,Copyu8Pinnumber);
     d1e:	a2 e3       	ldi	r26, 0x32	; 50
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e2 e3       	ldi	r30, 0x32	; 50
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_voidSetPinValue+0x1f6>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_voidSetPinValue+0x1f2>
     d40:	84 2b       	or	r24, r20
     d42:	8c 93       	st	X, r24
    break;
    default :

    break;
   }
}
     d44:	29 96       	adiw	r28, 0x09	; 9
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8Portnumber , u8 Copyu8Pinnumber , u8 Copyu8Direction)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	29 97       	sbiw	r28, 0x09	; 9
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6a 83       	std	Y+2, r22	; 0x02
     d6e:	4b 83       	std	Y+3, r20	; 0x03
switch(Copyu8Direction)
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	39 87       	std	Y+9, r19	; 0x09
     d78:	28 87       	std	Y+8, r18	; 0x08
     d7a:	88 85       	ldd	r24, Y+8	; 0x08
     d7c:	99 85       	ldd	r25, Y+9	; 0x09
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	39 f0       	breq	.+14     	; 0xd90 <DIO_voidSetPinDirection+0x3a>
     d82:	28 85       	ldd	r18, Y+8	; 0x08
     d84:	39 85       	ldd	r19, Y+9	; 0x09
     d86:	21 30       	cpi	r18, 0x01	; 1
     d88:	31 05       	cpc	r19, r1
     d8a:	09 f4       	brne	.+2      	; 0xd8e <DIO_voidSetPinDirection+0x38>
     d8c:	75 c0       	rjmp	.+234    	; 0xe78 <DIO_voidSetPinDirection+0x122>
     d8e:	e2 c0       	rjmp	.+452    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
   {
    case INPUT :
              switch(Copy_u8Portnumber)
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	3f 83       	std	Y+7, r19	; 0x07
     d98:	2e 83       	std	Y+6, r18	; 0x06
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	91 05       	cpc	r25, r1
     da2:	59 f1       	breq	.+86     	; 0xdfa <DIO_voidSetPinDirection+0xa4>
     da4:	2e 81       	ldd	r18, Y+6	; 0x06
     da6:	3f 81       	ldd	r19, Y+7	; 0x07
     da8:	22 30       	cpi	r18, 0x02	; 2
     daa:	31 05       	cpc	r19, r1
     dac:	2c f4       	brge	.+10     	; 0xdb8 <DIO_voidSetPinDirection+0x62>
     dae:	8e 81       	ldd	r24, Y+6	; 0x06
     db0:	9f 81       	ldd	r25, Y+7	; 0x07
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	69 f0       	breq	.+26     	; 0xdd0 <DIO_voidSetPinDirection+0x7a>
     db6:	ce c0       	rjmp	.+412    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
     db8:	2e 81       	ldd	r18, Y+6	; 0x06
     dba:	3f 81       	ldd	r19, Y+7	; 0x07
     dbc:	22 30       	cpi	r18, 0x02	; 2
     dbe:	31 05       	cpc	r19, r1
     dc0:	89 f1       	breq	.+98     	; 0xe24 <DIO_voidSetPinDirection+0xce>
     dc2:	8e 81       	ldd	r24, Y+6	; 0x06
     dc4:	9f 81       	ldd	r25, Y+7	; 0x07
     dc6:	83 30       	cpi	r24, 0x03	; 3
     dc8:	91 05       	cpc	r25, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <DIO_voidSetPinDirection+0x78>
     dcc:	40 c0       	rjmp	.+128    	; 0xe4e <DIO_voidSetPinDirection+0xf8>
     dce:	c2 c0       	rjmp	.+388    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
              {
                case PORTA:
                CLR_BIT(DDRA_REG,Copyu8Pinnumber);
     dd0:	aa e3       	ldi	r26, 0x3A	; 58
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ea e3       	ldi	r30, 0x3A	; 58
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_voidSetPinDirection+0x98>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_voidSetPinDirection+0x94>
     df2:	80 95       	com	r24
     df4:	84 23       	and	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	ad c0       	rjmp	.+346    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
                break;
                case PORTB:
                CLR_BIT(DDRB_REG,Copyu8Pinnumber);
     dfa:	a7 e3       	ldi	r26, 0x37	; 55
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e3       	ldi	r30, 0x37	; 55
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_voidSetPinDirection+0xc2>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_voidSetPinDirection+0xbe>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	98 c0       	rjmp	.+304    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
                break;
                case PORTC:
                CLR_BIT(DDRC_REG,Copyu8Pinnumber);
     e24:	a4 e3       	ldi	r26, 0x34	; 52
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e4 e3       	ldi	r30, 0x34	; 52
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_voidSetPinDirection+0xec>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_voidSetPinDirection+0xe8>
     e46:	80 95       	com	r24
     e48:	84 23       	and	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	83 c0       	rjmp	.+262    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
                break;
                case PORTD :
                CLR_BIT(DDRD_REG,Copyu8Pinnumber);
     e4e:	a1 e3       	ldi	r26, 0x31	; 49
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e1 e3       	ldi	r30, 0x31	; 49
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_voidSetPinDirection+0x116>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_voidSetPinDirection+0x112>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	6e c0       	rjmp	.+220    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>

              }

              break;
    case OUTPUT:
              switch(Copy_u8Portnumber)
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	3d 83       	std	Y+5, r19	; 0x05
     e80:	2c 83       	std	Y+4, r18	; 0x04
     e82:	8c 81       	ldd	r24, Y+4	; 0x04
     e84:	9d 81       	ldd	r25, Y+5	; 0x05
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	91 05       	cpc	r25, r1
     e8a:	49 f1       	breq	.+82     	; 0xede <DIO_voidSetPinDirection+0x188>
     e8c:	2c 81       	ldd	r18, Y+4	; 0x04
     e8e:	3d 81       	ldd	r19, Y+5	; 0x05
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	2c f4       	brge	.+10     	; 0xea0 <DIO_voidSetPinDirection+0x14a>
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <DIO_voidSetPinDirection+0x160>
     e9e:	5a c0       	rjmp	.+180    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	71 f1       	breq	.+92     	; 0xf06 <DIO_voidSetPinDirection+0x1b0>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	e9 f1       	breq	.+122    	; 0xf2e <DIO_voidSetPinDirection+0x1d8>
     eb4:	4f c0       	rjmp	.+158    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
              {
                case PORTA:
                SET_BIT(DDRA_REG,Copyu8Pinnumber);
     eb6:	aa e3       	ldi	r26, 0x3A	; 58
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ea e3       	ldi	r30, 0x3A	; 58
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_voidSetPinDirection+0x17e>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_voidSetPinDirection+0x17a>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	3b c0       	rjmp	.+118    	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
                break;
                case PORTB:
                SET_BIT(DDRB_REG,Copyu8Pinnumber);
     ede:	a7 e3       	ldi	r26, 0x37	; 55
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e7 e3       	ldi	r30, 0x37	; 55
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_voidSetPinDirection+0x1a6>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_voidSetPinDirection+0x1a2>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	27 c0       	rjmp	.+78     	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
                break;
                case PORTC:
                SET_BIT(DDRC_REG,Copyu8Pinnumber);
     f06:	a4 e3       	ldi	r26, 0x34	; 52
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e4 e3       	ldi	r30, 0x34	; 52
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_voidSetPinDirection+0x1ce>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_voidSetPinDirection+0x1ca>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	13 c0       	rjmp	.+38     	; 0xf54 <DIO_voidSetPinDirection+0x1fe>
                break;
                case PORTD :
                SET_BIT(DDRD_REG,Copyu8Pinnumber);
     f2e:	a1 e3       	ldi	r26, 0x31	; 49
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e1 e3       	ldi	r30, 0x31	; 49
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_voidSetPinDirection+0x1f6>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_voidSetPinDirection+0x1f2>
     f50:	84 2b       	or	r24, r20
     f52:	8c 93       	st	X, r24
    break;
    default :

    break;
   }
}
     f54:	29 96       	adiw	r28, 0x09	; 9
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(u8 Copy_u8Portnumber , u8 Copyu8Pinnumber)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <DIO_voidGetPinValue+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <DIO_voidGetPinValue+0x8>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	6b 83       	std	Y+3, r22	; 0x03
u8 Localu8Value ;
    switch(Copy_u8Portnumber)
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3d 83       	std	Y+5, r19	; 0x05
     f80:	2c 83       	std	Y+4, r18	; 0x04
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	39 f1       	breq	.+78     	; 0xfda <DIO_voidGetPinValue+0x74>
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <DIO_voidGetPinValue+0x3a>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <DIO_voidGetPinValue+0x50>
     f9e:	52 c0       	rjmp	.+164    	; 0x1044 <DIO_voidGetPinValue+0xde>
     fa0:	2c 81       	ldd	r18, Y+4	; 0x04
     fa2:	3d 81       	ldd	r19, Y+5	; 0x05
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	51 f1       	breq	.+84     	; 0xffe <DIO_voidGetPinValue+0x98>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	b9 f1       	breq	.+110    	; 0x1022 <DIO_voidGetPinValue+0xbc>
     fb4:	47 c0       	rjmp	.+142    	; 0x1044 <DIO_voidGetPinValue+0xde>
    {
        case PORTA:
                  Localu8Value = GET_BIT(PINA_REG,Copyu8Pinnumber);
     fb6:	e9 e3       	ldi	r30, 0x39	; 57
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_voidGetPinValue+0x6a>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_voidGetPinValue+0x66>
     fd4:	84 23       	and	r24, r20
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	35 c0       	rjmp	.+106    	; 0x1044 <DIO_voidGetPinValue+0xde>
        break;

        case PORTB:
                  Localu8Value = GET_BIT(PINB_REG,Copyu8Pinnumber);
     fda:	e6 e3       	ldi	r30, 0x36	; 54
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_voidGetPinValue+0x8e>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_voidGetPinValue+0x8a>
     ff8:	84 23       	and	r24, r20
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	23 c0       	rjmp	.+70     	; 0x1044 <DIO_voidGetPinValue+0xde>
        break;

        case PORTC:
                 Localu8Value = GET_BIT(PINC_REG,Copyu8Pinnumber);
     ffe:	e3 e3       	ldi	r30, 0x33	; 51
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_voidGetPinValue+0xb2>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_voidGetPinValue+0xae>
    101c:	84 23       	and	r24, r20
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	11 c0       	rjmp	.+34     	; 0x1044 <DIO_voidGetPinValue+0xde>
        break;

        case PORTD:
                 Localu8Value = GET_BIT(PIND_REG,Copyu8Pinnumber);
    1022:	e0 e3       	ldi	r30, 0x30	; 48
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_voidGetPinValue+0xd6>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_voidGetPinValue+0xd2>
    1040:	84 23       	and	r24, r20
    1042:	89 83       	std	Y+1, r24	; 0x01
        break;
        default:
        break;

    }  
    return Localu8Value;                    
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Portnumber , u8 Copyu8Value)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_voidSetPortValue+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_voidSetPortValue+0x8>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02
            switch(Copy_u8Portnumber)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3c 83       	std	Y+4, r19	; 0x04
    106e:	2b 83       	std	Y+3, r18	; 0x03
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	d1 f0       	breq	.+52     	; 0x10ae <DIO_voidSetPortValue+0x58>
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	3c 81       	ldd	r19, Y+4	; 0x04
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	2c f4       	brge	.+10     	; 0x108e <DIO_voidSetPortValue+0x38>
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	61 f0       	breq	.+24     	; 0x10a4 <DIO_voidSetPortValue+0x4e>
    108c:	1e c0       	rjmp	.+60     	; 0x10ca <DIO_voidSetPortValue+0x74>
    108e:	2b 81       	ldd	r18, Y+3	; 0x03
    1090:	3c 81       	ldd	r19, Y+4	; 0x04
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	81 f0       	breq	.+32     	; 0x10b8 <DIO_voidSetPortValue+0x62>
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	81 f0       	breq	.+32     	; 0x10c2 <DIO_voidSetPortValue+0x6c>
    10a2:	13 c0       	rjmp	.+38     	; 0x10ca <DIO_voidSetPortValue+0x74>
            {
                case PORTA:
                           PORTA_REG =Copyu8Value;
    10a4:	eb e3       	ldi	r30, 0x3B	; 59
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	80 83       	st	Z, r24
    10ac:	0e c0       	rjmp	.+28     	; 0x10ca <DIO_voidSetPortValue+0x74>
                break;

                case PORTB:
                           PORTB_REG =Copyu8Value;
    10ae:	e8 e3       	ldi	r30, 0x38	; 56
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	80 83       	st	Z, r24
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <DIO_voidSetPortValue+0x74>
                break;

                case PORTC:
                          PORTC_REG =Copyu8Value;
    10b8:	e5 e3       	ldi	r30, 0x35	; 53
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	80 83       	st	Z, r24
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <DIO_voidSetPortValue+0x74>
                break;

                case PORTD:
                           PORTD_REG =Copyu8Value;
    10c2:	e2 e3       	ldi	r30, 0x32	; 50
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	80 83       	st	Z, r24
                break;

                default:
                break;
            }
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Portnumber , u8 Copyu8Direction)
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <DIO_voidSetPortDirection+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_voidSetPortDirection+0x8>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	6a 83       	std	Y+2, r22	; 0x02
   switch(Copy_u8Portnumber)
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3c 83       	std	Y+4, r19	; 0x04
    10f0:	2b 83       	std	Y+3, r18	; 0x03
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	91 05       	cpc	r25, r1
    10fa:	d1 f0       	breq	.+52     	; 0x1130 <DIO_voidSetPortDirection+0x58>
    10fc:	2b 81       	ldd	r18, Y+3	; 0x03
    10fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	31 05       	cpc	r19, r1
    1104:	2c f4       	brge	.+10     	; 0x1110 <DIO_voidSetPortDirection+0x38>
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	61 f0       	breq	.+24     	; 0x1126 <DIO_voidSetPortDirection+0x4e>
    110e:	1e c0       	rjmp	.+60     	; 0x114c <DIO_voidSetPortDirection+0x74>
    1110:	2b 81       	ldd	r18, Y+3	; 0x03
    1112:	3c 81       	ldd	r19, Y+4	; 0x04
    1114:	22 30       	cpi	r18, 0x02	; 2
    1116:	31 05       	cpc	r19, r1
    1118:	81 f0       	breq	.+32     	; 0x113a <DIO_voidSetPortDirection+0x62>
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	91 05       	cpc	r25, r1
    1122:	81 f0       	breq	.+32     	; 0x1144 <DIO_voidSetPortDirection+0x6c>
    1124:	13 c0       	rjmp	.+38     	; 0x114c <DIO_voidSetPortDirection+0x74>
   {

                case PORTA:
                	DDRA_REG =Copyu8Direction;
    1126:	ea e3       	ldi	r30, 0x3A	; 58
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
    112e:	0e c0       	rjmp	.+28     	; 0x114c <DIO_voidSetPortDirection+0x74>
                break;

                case PORTB:
                	DDRB_REG =Copyu8Direction;                break;
    1130:	e7 e3       	ldi	r30, 0x37	; 55
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	80 83       	st	Z, r24
    1138:	09 c0       	rjmp	.+18     	; 0x114c <DIO_voidSetPortDirection+0x74>

                case PORTC:
                	DDRC_REG =Copyu8Direction;                break;
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	80 83       	st	Z, r24
    1142:	04 c0       	rjmp	.+8      	; 0x114c <DIO_voidSetPortDirection+0x74>

                case PORTD:
                	DDRD_REG =Copyu8Direction;                break;
    1144:	e1 e3       	ldi	r30, 0x31	; 49
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	80 83       	st	Z, r24
                default:
                break;
               }


}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <DIO_voidGetPortValue>:
u8 DIO_voidGetPortValue(u8 Copy_u8Portnumber)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <DIO_voidGetPortValue+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <DIO_voidGetPortValue+0x8>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	8a 83       	std	Y+2, r24	; 0x02
 u8 Localu8variable;
 
     switch(Copy_u8Portnumber)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3c 83       	std	Y+4, r19	; 0x04
    1170:	2b 83       	std	Y+3, r18	; 0x03
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	d1 f0       	breq	.+52     	; 0x11b0 <DIO_voidGetPortValue+0x56>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	2c f4       	brge	.+10     	; 0x1190 <DIO_voidGetPortValue+0x36>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	61 f0       	breq	.+24     	; 0x11a6 <DIO_voidGetPortValue+0x4c>
    118e:	1e c0       	rjmp	.+60     	; 0x11cc <DIO_voidGetPortValue+0x72>
    1190:	2b 81       	ldd	r18, Y+3	; 0x03
    1192:	3c 81       	ldd	r19, Y+4	; 0x04
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <DIO_voidGetPortValue+0x60>
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	91 05       	cpc	r25, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <DIO_voidGetPortValue+0x6a>
    11a4:	13 c0       	rjmp	.+38     	; 0x11cc <DIO_voidGetPortValue+0x72>
               {
                case PORTA:
                  Localu8variable = PINA_REG;
    11a6:	e9 e3       	ldi	r30, 0x39	; 57
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	0e c0       	rjmp	.+28     	; 0x11cc <DIO_voidGetPortValue+0x72>
                break;

                case PORTB:
                  Localu8variable = PINB_REG;
    11b0:	e6 e3       	ldi	r30, 0x36	; 54
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <DIO_voidGetPortValue+0x72>
                break;

                case PORTC:
                  Localu8variable = PINC_REG;
    11ba:	e3 e3       	ldi	r30, 0x33	; 51
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <DIO_voidGetPortValue+0x72>
                break;

                case PORTD:
                  Localu8variable = PIND_REG;
    11c4:	e0 e3       	ldi	r30, 0x30	; 48
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	89 83       	std	Y+1, r24	; 0x01
                break;

                default:
                break;
               }
     return Localu8variable;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
 
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <LCD_VoidInit>:
#include"../MCAL/DIO/DIO_Interface.h"
#include"LCD_Interface.h"
#include"../MCAL/DIO/DIO_Private.h"
#include"LCD_Config.h"
void LCD_VoidInit(void)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	e8 97       	sbiw	r28, 0x38	; 56
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_CR,RW,OUTPUT);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	66 e0       	ldi	r22, 0x06	; 6
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR,RS,OUTPUT);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	65 e0       	ldi	r22, 0x05	; 5
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CR,E,OUTPUT);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	67 e0       	ldi	r22, 0x07	; 7
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPortDirection(LCD_DR,PORT_HIGH);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <DIO_voidSetPortDirection>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a0 e0       	ldi	r26, 0x00	; 0
    121c:	b2 e4       	ldi	r27, 0x42	; 66
    121e:	8d ab       	std	Y+53, r24	; 0x35
    1220:	9e ab       	std	Y+54, r25	; 0x36
    1222:	af ab       	std	Y+55, r26	; 0x37
    1224:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1226:	6d a9       	ldd	r22, Y+53	; 0x35
    1228:	7e a9       	ldd	r23, Y+54	; 0x36
    122a:	8f a9       	ldd	r24, Y+55	; 0x37
    122c:	98 ad       	ldd	r25, Y+56	; 0x38
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	4a ef       	ldi	r20, 0xFA	; 250
    1234:	54 e4       	ldi	r21, 0x44	; 68
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	89 ab       	std	Y+49, r24	; 0x31
    1240:	9a ab       	std	Y+50, r25	; 0x32
    1242:	ab ab       	std	Y+51, r26	; 0x33
    1244:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1246:	69 a9       	ldd	r22, Y+49	; 0x31
    1248:	7a a9       	ldd	r23, Y+50	; 0x32
    124a:	8b a9       	ldd	r24, Y+51	; 0x33
    124c:	9c a9       	ldd	r25, Y+52	; 0x34
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f e3       	ldi	r21, 0x3F	; 63
    1256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125a:	88 23       	and	r24, r24
    125c:	2c f4       	brge	.+10     	; 0x1268 <LCD_VoidInit+0x8c>
		__ticks = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	98 ab       	std	Y+48, r25	; 0x30
    1264:	8f a7       	std	Y+47, r24	; 0x2f
    1266:	3f c0       	rjmp	.+126    	; 0x12e6 <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    1268:	69 a9       	ldd	r22, Y+49	; 0x31
    126a:	7a a9       	ldd	r23, Y+50	; 0x32
    126c:	8b a9       	ldd	r24, Y+51	; 0x33
    126e:	9c a9       	ldd	r25, Y+52	; 0x34
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	3f ef       	ldi	r19, 0xFF	; 255
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	57 e4       	ldi	r21, 0x47	; 71
    1278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127c:	18 16       	cp	r1, r24
    127e:	4c f5       	brge	.+82     	; 0x12d2 <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	6d a9       	ldd	r22, Y+53	; 0x35
    1282:	7e a9       	ldd	r23, Y+54	; 0x36
    1284:	8f a9       	ldd	r24, Y+55	; 0x37
    1286:	98 ad       	ldd	r25, Y+56	; 0x38
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	98 ab       	std	Y+48, r25	; 0x30
    12a6:	8f a7       	std	Y+47, r24	; 0x2f
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <LCD_VoidInit+0xec>
    12aa:	88 ec       	ldi	r24, 0xC8	; 200
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9e a7       	std	Y+46, r25	; 0x2e
    12b0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    12b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCD_VoidInit+0xda>
    12ba:	9e a7       	std	Y+46, r25	; 0x2e
    12bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12be:	8f a5       	ldd	r24, Y+47	; 0x2f
    12c0:	98 a9       	ldd	r25, Y+48	; 0x30
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	98 ab       	std	Y+48, r25	; 0x30
    12c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ca:	98 a9       	ldd	r25, Y+48	; 0x30
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	69 f7       	brne	.-38     	; 0x12aa <LCD_VoidInit+0xce>
    12d0:	14 c0       	rjmp	.+40     	; 0x12fa <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d2:	69 a9       	ldd	r22, Y+49	; 0x31
    12d4:	7a a9       	ldd	r23, Y+50	; 0x32
    12d6:	8b a9       	ldd	r24, Y+51	; 0x33
    12d8:	9c a9       	ldd	r25, Y+52	; 0x34
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	98 ab       	std	Y+48, r25	; 0x30
    12e4:	8f a7       	std	Y+47, r24	; 0x2f
    12e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12e8:	98 a9       	ldd	r25, Y+48	; 0x30
    12ea:	9c a7       	std	Y+44, r25	; 0x2c
    12ec:	8b a7       	std	Y+43, r24	; 0x2b
    12ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    12f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_VoidInit+0x116>
    12f6:	9c a7       	std	Y+44, r25	; 0x2c
    12f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(32);
	LCD_VoidSendCommand(FUNCTION_SET);
    12fa:	8c e3       	ldi	r24, 0x3C	; 60
    12fc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e8       	ldi	r26, 0x80	; 128
    1306:	bf e3       	ldi	r27, 0x3F	; 63
    1308:	8f a3       	std	Y+39, r24	; 0x27
    130a:	98 a7       	std	Y+40, r25	; 0x28
    130c:	a9 a7       	std	Y+41, r26	; 0x29
    130e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1310:	6f a1       	ldd	r22, Y+39	; 0x27
    1312:	78 a5       	ldd	r23, Y+40	; 0x28
    1314:	89 a5       	ldd	r24, Y+41	; 0x29
    1316:	9a a5       	ldd	r25, Y+42	; 0x2a
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a ef       	ldi	r20, 0xFA	; 250
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	8b a3       	std	Y+35, r24	; 0x23
    132a:	9c a3       	std	Y+36, r25	; 0x24
    132c:	ad a3       	std	Y+37, r26	; 0x25
    132e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1330:	6b a1       	ldd	r22, Y+35	; 0x23
    1332:	7c a1       	ldd	r23, Y+36	; 0x24
    1334:	8d a1       	ldd	r24, Y+37	; 0x25
    1336:	9e a1       	ldd	r25, Y+38	; 0x26
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1344:	88 23       	and	r24, r24
    1346:	2c f4       	brge	.+10     	; 0x1352 <LCD_VoidInit+0x176>
		__ticks = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9a a3       	std	Y+34, r25	; 0x22
    134e:	89 a3       	std	Y+33, r24	; 0x21
    1350:	3f c0       	rjmp	.+126    	; 0x13d0 <LCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    1352:	6b a1       	ldd	r22, Y+35	; 0x23
    1354:	7c a1       	ldd	r23, Y+36	; 0x24
    1356:	8d a1       	ldd	r24, Y+37	; 0x25
    1358:	9e a1       	ldd	r25, Y+38	; 0x26
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	57 e4       	ldi	r21, 0x47	; 71
    1362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1366:	18 16       	cp	r1, r24
    1368:	4c f5       	brge	.+82     	; 0x13bc <LCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	6f a1       	ldd	r22, Y+39	; 0x27
    136c:	78 a5       	ldd	r23, Y+40	; 0x28
    136e:	89 a5       	ldd	r24, Y+41	; 0x29
    1370:	9a a5       	ldd	r25, Y+42	; 0x2a
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e2       	ldi	r20, 0x20	; 32
    1378:	51 e4       	ldi	r21, 0x41	; 65
    137a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9a a3       	std	Y+34, r25	; 0x22
    1390:	89 a3       	std	Y+33, r24	; 0x21
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <LCD_VoidInit+0x1d6>
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	98 a3       	std	Y+32, r25	; 0x20
    139a:	8f 8f       	std	Y+31, r24	; 0x1f
    139c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    139e:	98 a1       	ldd	r25, Y+32	; 0x20
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <LCD_VoidInit+0x1c4>
    13a4:	98 a3       	std	Y+32, r25	; 0x20
    13a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	89 a1       	ldd	r24, Y+33	; 0x21
    13aa:	9a a1       	ldd	r25, Y+34	; 0x22
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9a a3       	std	Y+34, r25	; 0x22
    13b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	89 a1       	ldd	r24, Y+33	; 0x21
    13b4:	9a a1       	ldd	r25, Y+34	; 0x22
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	69 f7       	brne	.-38     	; 0x1394 <LCD_VoidInit+0x1b8>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <LCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13bc:	6b a1       	ldd	r22, Y+35	; 0x23
    13be:	7c a1       	ldd	r23, Y+36	; 0x24
    13c0:	8d a1       	ldd	r24, Y+37	; 0x25
    13c2:	9e a1       	ldd	r25, Y+38	; 0x26
    13c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9a a3       	std	Y+34, r25	; 0x22
    13ce:	89 a3       	std	Y+33, r24	; 0x21
    13d0:	89 a1       	ldd	r24, Y+33	; 0x21
    13d2:	9a a1       	ldd	r25, Y+34	; 0x22
    13d4:	9e 8f       	std	Y+30, r25	; 0x1e
    13d6:	8d 8f       	std	Y+29, r24	; 0x1d
    13d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <LCD_VoidInit+0x200>
    13e0:	9e 8f       	std	Y+30, r25	; 0x1e
    13e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_VoidSendCommand(DISPLAYON_OFF);
    13e4:	8c e0       	ldi	r24, 0x0C	; 12
    13e6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a0 e8       	ldi	r26, 0x80	; 128
    13f0:	bf e3       	ldi	r27, 0x3F	; 63
    13f2:	89 8f       	std	Y+25, r24	; 0x19
    13f4:	9a 8f       	std	Y+26, r25	; 0x1a
    13f6:	ab 8f       	std	Y+27, r26	; 0x1b
    13f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fa:	69 8d       	ldd	r22, Y+25	; 0x19
    13fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	4a ef       	ldi	r20, 0xFA	; 250
    1408:	54 e4       	ldi	r21, 0x44	; 68
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	8d 8b       	std	Y+21, r24	; 0x15
    1414:	9e 8b       	std	Y+22, r25	; 0x16
    1416:	af 8b       	std	Y+23, r26	; 0x17
    1418:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    141a:	6d 89       	ldd	r22, Y+21	; 0x15
    141c:	7e 89       	ldd	r23, Y+22	; 0x16
    141e:	8f 89       	ldd	r24, Y+23	; 0x17
    1420:	98 8d       	ldd	r25, Y+24	; 0x18
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e8       	ldi	r20, 0x80	; 128
    1428:	5f e3       	ldi	r21, 0x3F	; 63
    142a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    142e:	88 23       	and	r24, r24
    1430:	2c f4       	brge	.+10     	; 0x143c <LCD_VoidInit+0x260>
		__ticks = 1;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	9c 8b       	std	Y+20, r25	; 0x14
    1438:	8b 8b       	std	Y+19, r24	; 0x13
    143a:	3f c0       	rjmp	.+126    	; 0x14ba <LCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    143c:	6d 89       	ldd	r22, Y+21	; 0x15
    143e:	7e 89       	ldd	r23, Y+22	; 0x16
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	98 8d       	ldd	r25, Y+24	; 0x18
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	3f ef       	ldi	r19, 0xFF	; 255
    1448:	4f e7       	ldi	r20, 0x7F	; 127
    144a:	57 e4       	ldi	r21, 0x47	; 71
    144c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1450:	18 16       	cp	r1, r24
    1452:	4c f5       	brge	.+82     	; 0x14a6 <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1454:	69 8d       	ldd	r22, Y+25	; 0x19
    1456:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1458:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e2       	ldi	r20, 0x20	; 32
    1462:	51 e4       	ldi	r21, 0x41	; 65
    1464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	bc 01       	movw	r22, r24
    146e:	cd 01       	movw	r24, r26
    1470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	9c 8b       	std	Y+20, r25	; 0x14
    147a:	8b 8b       	std	Y+19, r24	; 0x13
    147c:	0f c0       	rjmp	.+30     	; 0x149c <LCD_VoidInit+0x2c0>
    147e:	88 ec       	ldi	r24, 0xC8	; 200
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	9a 8b       	std	Y+18, r25	; 0x12
    1484:	89 8b       	std	Y+17, r24	; 0x11
    1486:	89 89       	ldd	r24, Y+17	; 0x11
    1488:	9a 89       	ldd	r25, Y+18	; 0x12
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <LCD_VoidInit+0x2ae>
    148e:	9a 8b       	std	Y+18, r25	; 0x12
    1490:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	9c 8b       	std	Y+20, r25	; 0x14
    149a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	9c 89       	ldd	r25, Y+20	; 0x14
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	69 f7       	brne	.-38     	; 0x147e <LCD_VoidInit+0x2a2>
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <LCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a6:	6d 89       	ldd	r22, Y+21	; 0x15
    14a8:	7e 89       	ldd	r23, Y+22	; 0x16
    14aa:	8f 89       	ldd	r24, Y+23	; 0x17
    14ac:	98 8d       	ldd	r25, Y+24	; 0x18
    14ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	9c 8b       	std	Y+20, r25	; 0x14
    14b8:	8b 8b       	std	Y+19, r24	; 0x13
    14ba:	8b 89       	ldd	r24, Y+19	; 0x13
    14bc:	9c 89       	ldd	r25, Y+20	; 0x14
    14be:	98 8b       	std	Y+16, r25	; 0x10
    14c0:	8f 87       	std	Y+15, r24	; 0x0f
    14c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c4:	98 89       	ldd	r25, Y+16	; 0x10
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <LCD_VoidInit+0x2ea>
    14ca:	98 8b       	std	Y+16, r25	; 0x10
    14cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_VoidSendCommand(DISPLAY_Clear);
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e8       	ldi	r26, 0x80	; 128
    14da:	bf e3       	ldi	r27, 0x3F	; 63
    14dc:	8b 87       	std	Y+11, r24	; 0x0b
    14de:	9c 87       	std	Y+12, r25	; 0x0c
    14e0:	ad 87       	std	Y+13, r26	; 0x0d
    14e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a ef       	ldi	r20, 0xFA	; 250
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8f 83       	std	Y+7, r24	; 0x07
    14fe:	98 87       	std	Y+8, r25	; 0x08
    1500:	a9 87       	std	Y+9, r26	; 0x09
    1502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <LCD_VoidInit+0x34a>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <LCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <LCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <LCD_VoidInit+0x3aa>
    1568:	88 ec       	ldi	r24, 0xC8	; 200
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_VoidInit+0x398>
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <LCD_VoidInit+0x38c>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <LCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_VoidInit+0x3d4>
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_VoidSendCommand(Entry_Mode_Set_1);
    15b8:	86 e0       	ldi	r24, 0x06	; 6
    15ba:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
}
    15be:	e8 96       	adiw	r28, 0x38	; 56
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 Copy_u8_Value )
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2f 97       	sbiw	r28, 0x0f	; 15
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CR,RS,LOW);
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	65 e0       	ldi	r22, 0x05	; 5
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CR,RW,LOW);
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	66 e0       	ldi	r22, 0x06	; 6
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DR,Copy_u8_Value);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    15fe:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CR,E,HIGH);
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	67 e0       	ldi	r22, 0x07	; 7
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	a8 e4       	ldi	r26, 0x48	; 72
    1612:	b2 e4       	ldi	r27, 0x42	; 66
    1614:	8b 87       	std	Y+11, r24	; 0x0b
    1616:	9c 87       	std	Y+12, r25	; 0x0c
    1618:	ad 87       	std	Y+13, r26	; 0x0d
    161a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161c:	6b 85       	ldd	r22, Y+11	; 0x0b
    161e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	9e 85       	ldd	r25, Y+14	; 0x0e
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	4a ef       	ldi	r20, 0xFA	; 250
    162a:	54 e4       	ldi	r21, 0x44	; 68
    162c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	8f 83       	std	Y+7, r24	; 0x07
    1636:	98 87       	std	Y+8, r25	; 0x08
    1638:	a9 87       	std	Y+9, r26	; 0x09
    163a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    163c:	6f 81       	ldd	r22, Y+7	; 0x07
    163e:	78 85       	ldd	r23, Y+8	; 0x08
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	9a 85       	ldd	r25, Y+10	; 0x0a
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e8       	ldi	r20, 0x80	; 128
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1650:	88 23       	and	r24, r24
    1652:	2c f4       	brge	.+10     	; 0x165e <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    165e:	6f 81       	ldd	r22, Y+7	; 0x07
    1660:	78 85       	ldd	r23, Y+8	; 0x08
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	57 e4       	ldi	r21, 0x47	; 71
    166e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	4c f5       	brge	.+82     	; 0x16c8 <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1676:	6b 85       	ldd	r22, Y+11	; 0x0b
    1678:	7c 85       	ldd	r23, Y+12	; 0x0c
    167a:	8d 85       	ldd	r24, Y+13	; 0x0d
    167c:	9e 85       	ldd	r25, Y+14	; 0x0e
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e2       	ldi	r20, 0x20	; 32
    1684:	51 e4       	ldi	r21, 0x41	; 65
    1686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	0f c0       	rjmp	.+30     	; 0x16be <LCD_VoidSendCommand+0xee>
    16a0:	88 ec       	ldi	r24, 0xC8	; 200
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <LCD_VoidSendCommand+0xdc>
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <LCD_VoidSendCommand+0xd0>
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <LCD_VoidSendCommand+0x118>
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	DIO_voidSetPinValue(LCD_CR,E,LOW);
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	67 e0       	ldi	r22, 0x07	; 7
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
}
    16fa:	2f 96       	adiw	r28, 0x0f	; 15
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Copy_u8_Value)
{//RS = 1
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	2f 97       	sbiw	r28, 0x0f	; 15
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CR,RS,HIGH);
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	65 e0       	ldi	r22, 0x05	; 5
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CR,RW,LOW);
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	66 e0       	ldi	r22, 0x06	; 6
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DR,Copy_u8_Value);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	6f 85       	ldd	r22, Y+15	; 0x0f
    173a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(LCD_CR,E,HIGH);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	67 e0       	ldi	r22, 0x07	; 7
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a8 e4       	ldi	r26, 0x48	; 72
    174e:	b2 e4       	ldi	r27, 0x42	; 66
    1750:	8b 87       	std	Y+11, r24	; 0x0b
    1752:	9c 87       	std	Y+12, r25	; 0x0c
    1754:	ad 87       	std	Y+13, r26	; 0x0d
    1756:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1758:	6b 85       	ldd	r22, Y+11	; 0x0b
    175a:	7c 85       	ldd	r23, Y+12	; 0x0c
    175c:	8d 85       	ldd	r24, Y+13	; 0x0d
    175e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	4a ef       	ldi	r20, 0xFA	; 250
    1766:	54 e4       	ldi	r21, 0x44	; 68
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8f 83       	std	Y+7, r24	; 0x07
    1772:	98 87       	std	Y+8, r25	; 0x08
    1774:	a9 87       	std	Y+9, r26	; 0x09
    1776:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e8       	ldi	r20, 0x80	; 128
    1786:	5f e3       	ldi	r21, 0x3F	; 63
    1788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178c:	88 23       	and	r24, r24
    178e:	2c f4       	brge	.+10     	; 0x179a <LCD_VoidSendData+0x8e>
		__ticks = 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
    1798:	3f c0       	rjmp	.+126    	; 0x1818 <LCD_VoidSendData+0x10c>
	else if (__tmp > 65535)
    179a:	6f 81       	ldd	r22, Y+7	; 0x07
    179c:	78 85       	ldd	r23, Y+8	; 0x08
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	4f e7       	ldi	r20, 0x7F	; 127
    17a8:	57 e4       	ldi	r21, 0x47	; 71
    17aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ae:	18 16       	cp	r1, r24
    17b0:	4c f5       	brge	.+82     	; 0x1804 <LCD_VoidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <LCD_VoidSendData+0xee>
    17dc:	88 ec       	ldi	r24, 0xC8	; 200
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_VoidSendData+0xdc>
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	69 f7       	brne	.-38     	; 0x17dc <LCD_VoidSendData+0xd0>
    1802:	14 c0       	rjmp	.+40     	; 0x182c <LCD_VoidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_VoidSendData+0x118>
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	DIO_voidSetPinValue(LCD_CR,E,LOW);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	67 e0       	ldi	r22, 0x07	; 7
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
}
    1836:	2f 96       	adiw	r28, 0x0f	; 15
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <LCD_VoidSendNum>:

void LCD_VoidSendNum(u16 Copy_u16_Value)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <LCD_VoidSendNum+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <LCD_VoidSendNum+0x8>
    1850:	00 d0       	rcall	.+0      	; 0x1852 <LCD_VoidSendNum+0xa>
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05


    u16 m = 0 ;
    185a:	1c 82       	std	Y+4, r1	; 0x04
    185c:	1b 82       	std	Y+3, r1	; 0x03
    185e:	22 c0       	rjmp	.+68     	; 0x18a4 <LCD_VoidSendNum+0x5c>
    while (Copy_u16_Value!=0)
    {

        m=m*10+(Copy_u16_Value%10);
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	9c 01       	movw	r18, r24
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	c9 01       	movw	r24, r18
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	f9 01       	movw	r30, r18
    1876:	e8 0f       	add	r30, r24
    1878:	f9 1f       	adc	r31, r25
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	2a e0       	ldi	r18, 0x0A	; 10
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	b9 01       	movw	r22, r18
    1884:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodhi4>
    1888:	8e 0f       	add	r24, r30
    188a:	9f 1f       	adc	r25, r31
    188c:	9c 83       	std	Y+4, r25	; 0x04
    188e:	8b 83       	std	Y+3, r24	; 0x03
        Copy_u16_Value/=10;
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	2a e0       	ldi	r18, 0x0A	; 10
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	b9 01       	movw	r22, r18
    189a:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodhi4>
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
void LCD_VoidSendNum(u16 Copy_u16_Value)
{


    u16 m = 0 ;
    while (Copy_u16_Value!=0)
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	d1 f6       	brne	.-76     	; 0x1860 <LCD_VoidSendNum+0x18>
    18ac:	13 c0       	rjmp	.+38     	; 0x18d4 <LCD_VoidSendNum+0x8c>
    }


    while (m!=0)
    {   int mo;
        mo=m%10;
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	2a e0       	ldi	r18, 0x0A	; 10
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	b9 01       	movw	r22, r18
    18b8:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodhi4>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
//        LCD_VoidSendData(mo+48);
        m/=10;
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	2a e0       	ldi	r18, 0x0A	; 10
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	b9 01       	movw	r22, r18
    18ca:	0e 94 ba 12 	call	0x2574	; 0x2574 <__udivmodhi4>
    18ce:	cb 01       	movw	r24, r22
    18d0:	9c 83       	std	Y+4, r25	; 0x04
    18d2:	8b 83       	std	Y+3, r24	; 0x03
        Copy_u16_Value/=10;

    }


    while (m!=0)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	49 f7       	brne	.-46     	; 0x18ae <LCD_VoidSendNum+0x66>
        mo=m%10;
//        LCD_VoidSendData(mo+48);
        m/=10;
    }

}
    18dc:	26 96       	adiw	r28, 0x06	; 6
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <LCD_VoidSendString>:
void LCD_VoidSendString(u8 * ptr)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <LCD_VoidSendString+0x6>
    18f4:	0f 92       	push	r0
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	9b 83       	std	Y+3, r25	; 0x03
    18fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    18fe:	19 82       	std	Y+1, r1	; 0x01
    1900:	0e c0       	rjmp	.+28     	; 0x191e <LCD_VoidSendString+0x30>
	while(ptr[i]!='\0')
	{
		LCD_VoidSendData(ptr[i]);
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	28 2f       	mov	r18, r24
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	fc 01       	movw	r30, r24
    190e:	e2 0f       	add	r30, r18
    1910:	f3 1f       	adc	r31, r19
    1912:	80 81       	ld	r24, Z
    1914:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_VoidSendData>
		i++;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	8f 5f       	subi	r24, 0xFF	; 255
    191c:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_VoidSendString(u8 * ptr)
{
	u8 i = 0;
	while(ptr[i]!='\0')
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	fc 01       	movw	r30, r24
    192a:	e2 0f       	add	r30, r18
    192c:	f3 1f       	adc	r31, r19
    192e:	80 81       	ld	r24, Z
    1930:	88 23       	and	r24, r24
    1932:	39 f7       	brne	.-50     	; 0x1902 <LCD_VoidSendString+0x14>
	{
		LCD_VoidSendData(ptr[i]);
		i++;
	}
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <LCD_VoidGoto>:

void LCD_VoidGoto(u8 Copy_u8Line, u8 Copy_u8Column)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <LCD_VoidGoto+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <LCD_VoidGoto+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Line)
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3c 83       	std	Y+4, r19	; 0x04
    1958:	2b 83       	std	Y+3, r18	; 0x03
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	91 05       	cpc	r25, r1
    1962:	31 f0       	breq	.+12     	; 0x1970 <LCD_VoidGoto+0x30>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	31 f0       	breq	.+12     	; 0x197a <LCD_VoidGoto+0x3a>
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <LCD_VoidGoto+0x42>
	{
			case LINE_1 : LCD_VoidSendCommand((0x80)+Copy_u8Column);
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	80 58       	subi	r24, 0x80	; 128
    1974:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
    1978:	04 c0       	rjmp	.+8      	; 0x1982 <LCD_VoidGoto+0x42>

					break;
			case LINE_2 : LCD_VoidSendCommand((0xC0)+Copy_u8Column);
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	80 54       	subi	r24, 0x40	; 64
    197e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
			break ;
	}
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <LCD_VoidSendPattern>:

void LCD_VoidSendPattern(u8 *Copy_u8ARR ,  u8 Copy_CGRAM_ADDRESS,u8 Copy_u8Line,u8 Copy_u8Column)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	27 97       	sbiw	r28, 0x07	; 7
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	8b 83       	std	Y+3, r24	; 0x03
    19a8:	6d 83       	std	Y+5, r22	; 0x05
    19aa:	4e 83       	std	Y+6, r20	; 0x06
    19ac:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_Variabl = Copy_CGRAM_ADDRESS*8 ;
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	8a 83       	std	Y+2, r24	; 0x02
	LCD_VoidSendCommand((Local_Variabl)+64);
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	80 5c       	subi	r24, 0xC0	; 192
    19c6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
	u8 Local_iterator ;
	for( Local_iterator = 0 ; Local_iterator<8;Local_iterator++)
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	0e c0       	rjmp	.+28     	; 0x19ea <LCD_VoidSendPattern+0x5a>
	{
		LCD_VoidSendData(Copy_u8ARR[Local_iterator]);
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	fc 01       	movw	r30, r24
    19da:	e2 0f       	add	r30, r18
    19dc:	f3 1f       	adc	r31, r19
    19de:	80 81       	ld	r24, Z
    19e0:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_VoidSendData>
void LCD_VoidSendPattern(u8 *Copy_u8ARR ,  u8 Copy_CGRAM_ADDRESS,u8 Copy_u8Line,u8 Copy_u8Column)
{
	u8 Local_Variabl = Copy_CGRAM_ADDRESS*8 ;
	LCD_VoidSendCommand((Local_Variabl)+64);
	u8 Local_iterator ;
	for( Local_iterator = 0 ; Local_iterator<8;Local_iterator++)
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	88 30       	cpi	r24, 0x08	; 8
    19ee:	78 f3       	brcs	.-34     	; 0x19ce <LCD_VoidSendPattern+0x3e>
	{
		LCD_VoidSendData(Copy_u8ARR[Local_iterator]);
	}
	LCD_VoidGoto(Copy_u8Line,Copy_u8Column);
    19f0:	8e 81       	ldd	r24, Y+6	; 0x06
    19f2:	6f 81       	ldd	r22, Y+7	; 0x07
    19f4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
	LCD_VoidSendData(Copy_CGRAM_ADDRESS);
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_VoidSendData>
}
    19fe:	27 96       	adiw	r28, 0x07	; 7
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <KPD_voidInit>:
//.I/O : VOID ...............     //
//.RETURN : VOID  ..........     //
//.Desc:Initilazing KEYPAD..    //
//.............................//
void KPD_voidInit(void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_COL1,OUTPUT);
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	64 e0       	ldi	r22, 0x04	; 4
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_COL2,OUTPUT);
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	65 e0       	ldi	r22, 0x05	; 5
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_COL3,OUTPUT);
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	66 e0       	ldi	r22, 0x06	; 6
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_COL4,OUTPUT);
    1a36:	83 e0       	ldi	r24, 0x03	; 3
    1a38:	67 e0       	ldi	r22, 0x07	; 7
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_R0,INPUT);
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_R1,INPUT);
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_R2,INPUT);
    1a54:	83 e0       	ldi	r24, 0x03	; 3
    1a56:	62 e0       	ldi	r22, 0x02	; 2
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_PORT,KEYPAD_R3,INPUT);
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	63 e0       	ldi	r22, 0x03	; 3
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPortValue(KEYPAD_PORT,PORT_HIGH);
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	6f ef       	ldi	r22, 0xFF	; 255
    1a6c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPortValue>
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <KPD_u8GetPressedKey+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <KPD_u8GetPressedKey+0x8>
    1a7e:	0f 92       	push	r0
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pinvalue;
	u8 Local_PressedKey=255;
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ColsIterator;
	u8 Local_u8RowsIterator;
	u8 Local_u8Flag =0;
    1a88:	19 82       	std	Y+1, r1	; 0x01
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
    1a8a:	1b 82       	std	Y+3, r1	; 0x03
    1a8c:	67 c0       	rjmp	.+206    	; 0x1b5c <KPD_u8GetPressedKey+0xe6>
{
    //DEACTIVATE CURRENT COL
	DIO_voidSetPinValue(KEYPAD_PORT,Local_Au8Cols_Num[Local_u8ColsIterator],LOW);
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	88 2f       	mov	r24, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	e8 50       	subi	r30, 0x08	; 8
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	90 81       	ld	r25, Z
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	69 2f       	mov	r22, r25
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
	for( Local_u8RowsIterator=0;Local_u8RowsIterator<4;Local_u8RowsIterator++ )
    1aa6:	1a 82       	std	Y+2, r1	; 0x02
    1aa8:	43 c0       	rjmp	.+134    	; 0x1b30 <KPD_u8GetPressedKey+0xba>
	{
		Local_u8Pinvalue=DIO_voidGetPinValue(KEYPAD_PORT,Local_Au8Rows_Num[Local_u8RowsIterator]);
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	e4 50       	subi	r30, 0x04	; 4
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	90 81       	ld	r25, Z
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	69 2f       	mov	r22, r25
    1abc:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_voidGetPinValue>
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
		if(Local_u8Pinvalue==0)
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	88 23       	and	r24, r24
    1ac6:	89 f5       	brne	.+98     	; 0x1b2a <KPD_u8GetPressedKey+0xb4>
		{
		Local_u8Pinvalue=DIO_voidGetPinValue(KEYPAD_PORT,Local_Au8Rows_Num[Local_u8RowsIterator]);
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	fc 01       	movw	r30, r24
    1ad0:	e4 50       	subi	r30, 0x04	; 4
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	90 81       	ld	r25, Z
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
    1ad8:	69 2f       	mov	r22, r25
    1ada:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_voidGetPinValue>
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	0c c0       	rjmp	.+24     	; 0x1afa <KPD_u8GetPressedKey+0x84>
		while(Local_u8Pinvalue==0)
		{
			Local_u8Pinvalue=DIO_voidGetPinValue(KEYPAD_PORT,Local_Au8Rows_Num[Local_u8RowsIterator]);
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	fc 01       	movw	r30, r24
    1aea:	e4 50       	subi	r30, 0x04	; 4
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	90 81       	ld	r25, Z
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	69 2f       	mov	r22, r25
    1af4:	0e 94 b3 07 	call	0xf66	; 0xf66 <DIO_voidGetPinValue>
    1af8:	8d 83       	std	Y+5, r24	; 0x05
	{
		Local_u8Pinvalue=DIO_voidGetPinValue(KEYPAD_PORT,Local_Au8Rows_Num[Local_u8RowsIterator]);
		if(Local_u8Pinvalue==0)
		{
		Local_u8Pinvalue=DIO_voidGetPinValue(KEYPAD_PORT,Local_Au8Rows_Num[Local_u8RowsIterator]);
		while(Local_u8Pinvalue==0)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	88 23       	and	r24, r24
    1afe:	89 f3       	breq	.-30     	; 0x1ae2 <KPD_u8GetPressedKey+0x6c>
		{
			Local_u8Pinvalue=DIO_voidGetPinValue(KEYPAD_PORT,Local_Au8Rows_Num[Local_u8RowsIterator]);
		}
		Local_PressedKey=Local_Au8KeysArr[Local_u8RowsIterator][Local_u8ColsIterator];
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	48 2f       	mov	r20, r24
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	ca 01       	movw	r24, r20
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	82 0f       	add	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e0 50       	subi	r30, 0x00	; 0
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	80 81       	ld	r24, Z
    1b22:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8Flag =1 ;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	07 c0       	rjmp	.+14     	; 0x1b38 <KPD_u8GetPressedKey+0xc2>
	u8 Local_u8Flag =0;
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
{
    //DEACTIVATE CURRENT COL
	DIO_voidSetPinValue(KEYPAD_PORT,Local_Au8Cols_Num[Local_u8ColsIterator],LOW);
	for( Local_u8RowsIterator=0;Local_u8RowsIterator<4;Local_u8RowsIterator++ )
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	8f 5f       	subi	r24, 0xFF	; 255
    1b2e:	8a 83       	std	Y+2, r24	; 0x02
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	08 f4       	brcc	.+2      	; 0x1b38 <KPD_u8GetPressedKey+0xc2>
    1b36:	b9 cf       	rjmp	.-142    	; 0x1aaa <KPD_u8GetPressedKey+0x34>
		Local_PressedKey=Local_Au8KeysArr[Local_u8RowsIterator][Local_u8ColsIterator];
		Local_u8Flag =1 ;
		break;
		}
	}
	DIO_voidSetPinValue(KEYPAD_PORT,Local_Au8Cols_Num[Local_u8ColsIterator],HIGH);
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e8 50       	subi	r30, 0x08	; 8
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	90 81       	ld	r25, Z
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	69 2f       	mov	r22, r25
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
	if(Local_u8Flag==1 )
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <KPD_u8GetPressedKey+0xee>
	u8 Local_u8Pinvalue;
	u8 Local_PressedKey=255;
	u8 Local_u8ColsIterator;
	u8 Local_u8RowsIterator;
	u8 Local_u8Flag =0;
for( Local_u8ColsIterator=0;Local_u8ColsIterator<4;Local_u8ColsIterator++ )
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <KPD_u8GetPressedKey+0xee>
    1b62:	95 cf       	rjmp	.-214    	; 0x1a8e <KPD_u8GetPressedKey+0x18>
	if(Local_u8Flag==1 )
	{
		break;
	}
}
return Local_PressedKey ;
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <DC_MOTOR_VoidInit>:
#include"DC_MOTOR_Interface.h"
#include"../MCAL/DIO/DIO_Private.h"
#include"DC_MOTOR_Config.h"

void DC_MOTOR_VoidInit(void)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(MOTOR_PORT,MOTOR_PIN1,OUTPUT);
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTOR_PORT,MOTOR_PIN2,OUTPUT);
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	41 e0       	ldi	r20, 0x01	; 1
    1b8e:	0e 94 ab 06 	call	0xd56	; 0xd56 <DIO_voidSetPinDirection>
}
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <DC_MOTOR_VoidDirection>:

void DC_MOTOR_VoidDirection(u8 Copy_u8Direction)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DC_MOTOR_VoidDirection+0x6>
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Direction)
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	3b 83       	std	Y+3, r19	; 0x03
    1bae:	2a 83       	std	Y+2, r18	; 0x02
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <DC_MOTOR_VoidDirection+0x2c>
    1bb8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bba:	3b 81       	ldd	r19, Y+3	; 0x03
    1bbc:	21 30       	cpi	r18, 0x01	; 1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	61 f0       	breq	.+24     	; 0x1bda <DC_MOTOR_VoidDirection+0x42>
    1bc2:	15 c0       	rjmp	.+42     	; 0x1bee <DC_MOTOR_VoidDirection+0x56>
	{
			case CCW :
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN2,LOW);
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN1,HIGH);
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	41 e0       	ldi	r20, 0x01	; 1
    1bd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
    1bd8:	0a c0       	rjmp	.+20     	; 0x1bee <DC_MOTOR_VoidDirection+0x56>

							break ;
			case CW	:
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN1,LOW);
    1bda:	82 e0       	ldi	r24, 0x02	; 2
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN2,HIGH);
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	41 e0       	ldi	r20, 0x01	; 1
    1bea:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
							break;
	}
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <DC_MOTOR_VoidStop>:

void DC_MOTOR_VoidStop()
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN1,LOW);
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTOR_PORT,MOTOR_PIN2,LOW);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinValue>
}
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <main>:
//password in data base
u8 PASSWORD[4] = {'1','2','3','4'};
//password entered by user
u8 PASS_CHECK [4]={0};
int main ()
{
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	ca 55       	subi	r28, 0x5A	; 90
    1c2a:	d0 40       	sbci	r29, 0x00	; 0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
	DC_MOTOR_VoidInit();
    1c36:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DC_MOTOR_VoidInit>
	static u8 Local_u8Iterator = 0 ;
	LCD_VoidInit();
    1c3a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <LCD_VoidInit>
	KPD_voidInit();
    1c3e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <KPD_voidInit>
	u8 Local_u8KeyPressed = 255 ;
    1c42:	fe 01       	movw	r30, r28
    1c44:	e8 5a       	subi	r30, 0xA8	; 168
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	80 83       	st	Z, r24
	u8 Local_flag = 0;
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e9 5a       	subi	r30, 0xA9	; 169
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	10 82       	st	Z, r1
	u8 i  ;
	u8 counter =0;
    1c54:	fe 01       	movw	r30, r28
    1c56:	eb 5a       	subi	r30, 0xAB	; 171
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	10 82       	st	Z, r1

	while (1 )
	{


		if(Local_u8Iterator ==0 )
    1c5c:	80 91 19 01 	lds	r24, 0x0119
    1c60:	88 23       	and	r24, r24
    1c62:	59 f4       	brne	.+22     	; 0x1c7a <main+0x5e>
		{
			LCD_VoidSendCommand(DISPLAY_Clear);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
			LCD_VoidSendString("enter pass");
    1c6a:	80 e6       	ldi	r24, 0x60	; 96
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
			LCD_VoidGoto(LINE_2,1 );
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
		}

		do
		{
			Local_u8KeyPressed = KPD_u8GetPressedKey();
    1c7a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <KPD_u8GetPressedKey>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e8 5a       	subi	r30, 0xA8	; 168
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 83       	st	Z, r24
		}while(Local_u8KeyPressed	==	255);
    1c86:	fe 01       	movw	r30, r28
    1c88:	e8 5a       	subi	r30, 0xA8	; 168
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c90:	a1 f3       	breq	.-24     	; 0x1c7a <main+0x5e>

			LCD_VoidSendData('*');
    1c92:	8a e2       	ldi	r24, 0x2A	; 42
    1c94:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_VoidSendData>
			PASS_CHECK [Local_u8Iterator]= Local_u8KeyPressed  ;
    1c98:	80 91 19 01 	lds	r24, 0x0119
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	ac 5e       	subi	r26, 0xEC	; 236
    1ca4:	be 4f       	sbci	r27, 0xFE	; 254
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e8 5a       	subi	r30, 0xA8	; 168
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	8c 93       	st	X, r24
			Local_u8KeyPressed = 255 ;
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e8 5a       	subi	r30, 0xA8	; 168
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	80 83       	st	Z, r24
			Local_u8Iterator ++ ;
    1cba:	80 91 19 01 	lds	r24, 0x0119
    1cbe:	8f 5f       	subi	r24, 0xFF	; 255
    1cc0:	80 93 19 01 	sts	0x0119, r24
			if(Local_u8Iterator==4)
    1cc4:	80 91 19 01 	lds	r24, 0x0119
    1cc8:	84 30       	cpi	r24, 0x04	; 4
    1cca:	41 f6       	brne	.-112    	; 0x1c5c <main+0x40>
			{
				Local_u8Iterator = 0;
    1ccc:	10 92 19 01 	sts	0x0119, r1
				for(i = 0 ; i <= 3 ; i++)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ea 5a       	subi	r30, 0xAA	; 170
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	10 82       	st	Z, r1
    1cd8:	32 c0       	rjmp	.+100    	; 0x1d3e <main+0x122>
				{
					if	(PASS_CHECK[i]==PASSWORD[i])
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ea 5a       	subi	r30, 0xAA	; 170
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	ec 5e       	subi	r30, 0xEC	; 236
    1cea:	fe 4f       	sbci	r31, 0xFE	; 254
    1cec:	20 81       	ld	r18, Z
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ea 5a       	subi	r30, 0xAA	; 170
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	e0 5f       	subi	r30, 0xF0	; 240
    1cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1d00:	80 81       	ld	r24, Z
    1d02:	28 17       	cp	r18, r24
    1d04:	b9 f4       	brne	.+46     	; 0x1d34 <main+0x118>
					{
						LCD_VoidGoto(LINE_2,1);
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
						counter ++ ;
    1d0e:	de 01       	movw	r26, r28
    1d10:	ab 5a       	subi	r26, 0xAB	; 171
    1d12:	bf 4f       	sbci	r27, 0xFF	; 255
    1d14:	fe 01       	movw	r30, r28
    1d16:	eb 5a       	subi	r30, 0xAB	; 171
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	8c 93       	st	X, r24
			Local_u8KeyPressed = 255 ;
			Local_u8Iterator ++ ;
			if(Local_u8Iterator==4)
			{
				Local_u8Iterator = 0;
				for(i = 0 ; i <= 3 ; i++)
    1d20:	de 01       	movw	r26, r28
    1d22:	aa 5a       	subi	r26, 0xAA	; 170
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	ea 5a       	subi	r30, 0xAA	; 170
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
    1d30:	8c 93       	st	X, r24
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <main+0x122>
						LCD_VoidGoto(LINE_2,1);
						counter ++ ;
					}
					else
					{
						LCD_VoidGoto(LINE_2,1);
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
    1d3c:	06 c0       	rjmp	.+12     	; 0x1d4a <main+0x12e>
			Local_u8KeyPressed = 255 ;
			Local_u8Iterator ++ ;
			if(Local_u8Iterator==4)
			{
				Local_u8Iterator = 0;
				for(i = 0 ; i <= 3 ; i++)
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ea 5a       	subi	r30, 0xAA	; 170
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	84 30       	cpi	r24, 0x04	; 4
    1d48:	40 f2       	brcs	.-112    	; 0x1cda <main+0xbe>
					{
						LCD_VoidGoto(LINE_2,1);
						break;
					}
				}
				if(counter == 4 )
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	eb 5a       	subi	r30, 0xAB	; 171
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <main+0x13c>
    1d56:	dd c3       	rjmp	.+1978   	; 0x2512 <main+0x8f6>
				{
					LCD_VoidSendCommand(DISPLAY_Clear);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
					LCD_VoidGoto(LINE_1,5);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	65 e0       	ldi	r22, 0x05	; 5
    1d62:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
					LCD_VoidSendString("Welcome!");
    1d66:	8b e6       	ldi	r24, 0x6B	; 107
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
					LCD_VoidGoto(LINE_2,3);
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	63 e0       	ldi	r22, 0x03	; 3
    1d72:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
					LCD_VoidSendString("To our system ");
    1d76:	84 e7       	ldi	r24, 0x74	; 116
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ef 5a       	subi	r30, 0xAF	; 175
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a6 e9       	ldi	r26, 0x96	; 150
    1d8a:	b3 e4       	ldi	r27, 0x43	; 67
    1d8c:	80 83       	st	Z, r24
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	a2 83       	std	Z+2, r26	; 0x02
    1d92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	8e 01       	movw	r16, r28
    1d96:	03 5b       	subi	r16, 0xB3	; 179
    1d98:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ef 5a       	subi	r30, 0xAF	; 175
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a ef       	ldi	r20, 0xFA	; 250
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	f8 01       	movw	r30, r16
    1dba:	80 83       	st	Z, r24
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	a2 83       	std	Z+2, r26	; 0x02
    1dc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e3 5b       	subi	r30, 0xB3	; 179
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	44 f4       	brge	.+16     	; 0x1df0 <main+0x1d4>
		__ticks = 1;
    1de0:	fe 01       	movw	r30, r28
    1de2:	e5 5b       	subi	r30, 0xB5	; 181
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	64 c0       	rjmp	.+200    	; 0x1eb8 <main+0x29c>
	else if (__tmp > 65535)
    1df0:	fe 01       	movw	r30, r28
    1df2:	e3 5b       	subi	r30, 0xB3	; 179
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	0c f0       	brlt	.+2      	; 0x1e10 <main+0x1f4>
    1e0e:	43 c0       	rjmp	.+134    	; 0x1e96 <main+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	fe 01       	movw	r30, r28
    1e12:	ef 5a       	subi	r30, 0xAF	; 175
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8e 01       	movw	r16, r28
    1e30:	05 5b       	subi	r16, 0xB5	; 181
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	80 83       	st	Z, r24
    1e46:	1f c0       	rjmp	.+62     	; 0x1e86 <main+0x26a>
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e7 5b       	subi	r30, 0xB7	; 183
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	fe 01       	movw	r30, r28
    1e58:	e7 5b       	subi	r30, 0xB7	; 183
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <main+0x244>
    1e64:	fe 01       	movw	r30, r28
    1e66:	e7 5b       	subi	r30, 0xB7	; 183
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	de 01       	movw	r26, r28
    1e70:	a5 5b       	subi	r26, 0xB5	; 181
    1e72:	bf 4f       	sbci	r27, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	e5 5b       	subi	r30, 0xB5	; 181
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	11 96       	adiw	r26, 0x01	; 1
    1e82:	9c 93       	st	X, r25
    1e84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	fe 01       	movw	r30, r28
    1e88:	e5 5b       	subi	r30, 0xB5	; 181
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	d1 f6       	brne	.-76     	; 0x1e48 <main+0x22c>
    1e94:	27 c0       	rjmp	.+78     	; 0x1ee4 <main+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	8e 01       	movw	r16, r28
    1e98:	05 5b       	subi	r16, 0xB5	; 181
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e3 5b       	subi	r30, 0xB3	; 179
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    1eb8:	de 01       	movw	r26, r28
    1eba:	a9 5b       	subi	r26, 0xB9	; 185
    1ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e5 5b       	subi	r30, 0xB5	; 181
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	8d 93       	st	X+, r24
    1eca:	9c 93       	st	X, r25
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e9 5b       	subi	r30, 0xB9	; 185
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 81       	ld	r24, Z
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <main+0x2ba>
    1eda:	fe 01       	movw	r30, r28
    1edc:	e9 5b       	subi	r30, 0xB9	; 185
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
					_delay_ms(300);
					//entering the system
					while(1)
					{
						LCD_VoidSendCommand(DISPLAY_Clear);
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
						LCD_VoidSendString("SELECT MODE  ");
    1eea:	83 e8       	ldi	r24, 0x83	; 131
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ed 5b       	subi	r30, 0xBD	; 189
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a6 e9       	ldi	r26, 0x96	; 150
    1efe:	b3 e4       	ldi	r27, 0x43	; 67
    1f00:	80 83       	st	Z, r24
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	a2 83       	std	Z+2, r26	; 0x02
    1f06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f08:	8e 01       	movw	r16, r28
    1f0a:	01 5c       	subi	r16, 0xC1	; 193
    1f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ed 5b       	subi	r30, 0xBD	; 189
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	4a ef       	ldi	r20, 0xFA	; 250
    1f22:	54 e4       	ldi	r21, 0x44	; 68
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	80 83       	st	Z, r24
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	a2 83       	std	Z+2, r26	; 0x02
    1f34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f36:	fe 01       	movw	r30, r28
    1f38:	ff 96       	adiw	r30, 0x3f	; 63
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	2c f4       	brge	.+10     	; 0x1f5c <main+0x340>
		__ticks = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9e af       	std	Y+62, r25	; 0x3e
    1f58:	8d af       	std	Y+61, r24	; 0x3d
    1f5a:	46 c0       	rjmp	.+140    	; 0x1fe8 <main+0x3cc>
	else if (__tmp > 65535)
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ff 96       	adiw	r30, 0x3f	; 63
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	64 f5       	brge	.+88     	; 0x1fd0 <main+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ed 5b       	subi	r30, 0xBD	; 189
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9e af       	std	Y+62, r25	; 0x3e
    1fa4:	8d af       	std	Y+61, r24	; 0x3d
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <main+0x3aa>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c af       	std	Y+60, r25	; 0x3c
    1fae:	8b af       	std	Y+59, r24	; 0x3b
    1fb0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <main+0x398>
    1fb8:	9c af       	std	Y+60, r25	; 0x3c
    1fba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9e af       	std	Y+62, r25	; 0x3e
    1fc4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <main+0x38c>
    1fce:	16 c0       	rjmp	.+44     	; 0x1ffc <main+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ff 96       	adiw	r30, 0x3f	; 63
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e af       	std	Y+62, r25	; 0x3e
    1fe6:	8d af       	std	Y+61, r24	; 0x3d
    1fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fec:	9a af       	std	Y+58, r25	; 0x3a
    1fee:	89 af       	std	Y+57, r24	; 0x39
    1ff0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <main+0x3d8>
    1ff8:	9a af       	std	Y+58, r25	; 0x3a
    1ffa:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(300);
						LCD_VoidSendCommand(DISPLAY_Clear);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
						LCD_VoidGoto(LINE_1,1);
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
						LCD_VoidSendString("1-DC MOTOR ");
    200a:	81 e9       	ldi	r24, 0x91	; 145
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
						LCD_VoidGoto(LINE_2,1);
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	61 e0       	ldi	r22, 0x01	; 1
    2016:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
						LCD_VoidSendString("2- Servo MOTOR ");
    201a:	8d e9       	ldi	r24, 0x9D	; 157
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	aa ef       	ldi	r26, 0xFA	; 250
    2028:	b3 e4       	ldi	r27, 0x43	; 67
    202a:	8d ab       	std	Y+53, r24	; 0x35
    202c:	9e ab       	std	Y+54, r25	; 0x36
    202e:	af ab       	std	Y+55, r26	; 0x37
    2030:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2032:	6d a9       	ldd	r22, Y+53	; 0x35
    2034:	7e a9       	ldd	r23, Y+54	; 0x36
    2036:	8f a9       	ldd	r24, Y+55	; 0x37
    2038:	98 ad       	ldd	r25, Y+56	; 0x38
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a ef       	ldi	r20, 0xFA	; 250
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	89 ab       	std	Y+49, r24	; 0x31
    204c:	9a ab       	std	Y+50, r25	; 0x32
    204e:	ab ab       	std	Y+51, r26	; 0x33
    2050:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2052:	69 a9       	ldd	r22, Y+49	; 0x31
    2054:	7a a9       	ldd	r23, Y+50	; 0x32
    2056:	8b a9       	ldd	r24, Y+51	; 0x33
    2058:	9c a9       	ldd	r25, Y+52	; 0x34
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <main+0x458>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	98 ab       	std	Y+48, r25	; 0x30
    2070:	8f a7       	std	Y+47, r24	; 0x2f
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <main+0x4d6>
	else if (__tmp > 65535)
    2074:	69 a9       	ldd	r22, Y+49	; 0x31
    2076:	7a a9       	ldd	r23, Y+50	; 0x32
    2078:	8b a9       	ldd	r24, Y+51	; 0x33
    207a:	9c a9       	ldd	r25, Y+52	; 0x34
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	3f ef       	ldi	r19, 0xFF	; 255
    2080:	4f e7       	ldi	r20, 0x7F	; 127
    2082:	57 e4       	ldi	r21, 0x47	; 71
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <main+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	6d a9       	ldd	r22, Y+53	; 0x35
    208e:	7e a9       	ldd	r23, Y+54	; 0x36
    2090:	8f a9       	ldd	r24, Y+55	; 0x37
    2092:	98 ad       	ldd	r25, Y+56	; 0x38
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e2       	ldi	r20, 0x20	; 32
    209a:	51 e4       	ldi	r21, 0x41	; 65
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	98 ab       	std	Y+48, r25	; 0x30
    20b2:	8f a7       	std	Y+47, r24	; 0x2f
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <main+0x4b8>
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9e a7       	std	Y+46, r25	; 0x2e
    20bc:	8d a7       	std	Y+45, r24	; 0x2d
    20be:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <main+0x4a6>
    20c6:	9e a7       	std	Y+46, r25	; 0x2e
    20c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    20cc:	98 a9       	ldd	r25, Y+48	; 0x30
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	98 ab       	std	Y+48, r25	; 0x30
    20d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d6:	98 a9       	ldd	r25, Y+48	; 0x30
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	69 f7       	brne	.-38     	; 0x20b6 <main+0x49a>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <main+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	69 a9       	ldd	r22, Y+49	; 0x31
    20e0:	7a a9       	ldd	r23, Y+50	; 0x32
    20e2:	8b a9       	ldd	r24, Y+51	; 0x33
    20e4:	9c a9       	ldd	r25, Y+52	; 0x34
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	98 ab       	std	Y+48, r25	; 0x30
    20f0:	8f a7       	std	Y+47, r24	; 0x2f
    20f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f4:	98 a9       	ldd	r25, Y+48	; 0x30
    20f6:	9c a7       	std	Y+44, r25	; 0x2c
    20f8:	8b a7       	std	Y+43, r24	; 0x2b
    20fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <main+0x4e2>
    2102:	9c a7       	std	Y+44, r25	; 0x2c
    2104:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(500);
						LCD_VoidSendCommand(DISPLAY_Clear);
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
						LCD_VoidSendString("CHOICE ");
    210c:	8d ea       	ldi	r24, 0xAD	; 173
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
						LCD_VoidGoto(LINE_2,1);
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
						Local_u8KeyPressed = 255 ;
    211c:	fe 01       	movw	r30, r28
    211e:	e8 5a       	subi	r30, 0xA8	; 168
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	80 83       	st	Z, r24
						do
						{
						Local_u8KeyPressed = KPD_u8GetPressedKey();
    2126:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <KPD_u8GetPressedKey>
    212a:	fe 01       	movw	r30, r28
    212c:	e8 5a       	subi	r30, 0xA8	; 168
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	80 83       	st	Z, r24
						}while(Local_u8KeyPressed == 255 );
    2132:	fe 01       	movw	r30, r28
    2134:	e8 5a       	subi	r30, 0xA8	; 168
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	8f 3f       	cpi	r24, 0xFF	; 255
    213c:	a1 f3       	breq	.-24     	; 0x2126 <main+0x50a>
						LCD_VoidSendData(Local_u8KeyPressed);
    213e:	fe 01       	movw	r30, r28
    2140:	e8 5a       	subi	r30, 0xA8	; 168
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_VoidSendData>
						if(Local_u8KeyPressed  == '1' || Local_u8KeyPressed=='2'  )
    214a:	fe 01       	movw	r30, r28
    214c:	e8 5a       	subi	r30, 0xA8	; 168
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	81 33       	cpi	r24, 0x31	; 49
    2154:	39 f0       	breq	.+14     	; 0x2164 <main+0x548>
    2156:	fe 01       	movw	r30, r28
    2158:	e8 5a       	subi	r30, 0xA8	; 168
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 81       	ld	r24, Z
    215e:	82 33       	cpi	r24, 0x32	; 50
    2160:	09 f0       	breq	.+2      	; 0x2164 <main+0x548>
    2162:	d1 c1       	rjmp	.+930    	; 0x2506 <main+0x8ea>
						{
							switch (Local_u8KeyPressed)
    2164:	fe 01       	movw	r30, r28
    2166:	e8 5a       	subi	r30, 0xA8	; 168
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	81 33       	cpi	r24, 0x31	; 49
    2172:	91 05       	cpc	r25, r1
    2174:	09 f0       	breq	.+2      	; 0x2178 <main+0x55c>
    2176:	b6 ce       	rjmp	.-660    	; 0x1ee4 <main+0x2c8>
							{
								case	'1' : LCD_VoidSendCommand(DISPLAY_Clear);
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
												LCD_VoidSendString("1- CW ");
    217e:	85 eb       	ldi	r24, 0xB5	; 181
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
												LCD_VoidGoto(LINE_2,1);
    2186:	82 e0       	ldi	r24, 0x02	; 2
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
												LCD_VoidSendString("2- CCW ");
    218e:	8c eb       	ldi	r24, 0xBC	; 188
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	aa ef       	ldi	r26, 0xFA	; 250
    219c:	b3 e4       	ldi	r27, 0x43	; 67
    219e:	8f a3       	std	Y+39, r24	; 0x27
    21a0:	98 a7       	std	Y+40, r25	; 0x28
    21a2:	a9 a7       	std	Y+41, r26	; 0x29
    21a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	6f a1       	ldd	r22, Y+39	; 0x27
    21a8:	78 a5       	ldd	r23, Y+40	; 0x28
    21aa:	89 a5       	ldd	r24, Y+41	; 0x29
    21ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a ef       	ldi	r20, 0xFA	; 250
    21b4:	54 e4       	ldi	r21, 0x44	; 68
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8b a3       	std	Y+35, r24	; 0x23
    21c0:	9c a3       	std	Y+36, r25	; 0x24
    21c2:	ad a3       	std	Y+37, r26	; 0x25
    21c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21c6:	6b a1       	ldd	r22, Y+35	; 0x23
    21c8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ca:	8d a1       	ldd	r24, Y+37	; 0x25
    21cc:	9e a1       	ldd	r25, Y+38	; 0x26
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <main+0x5cc>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9a a3       	std	Y+34, r25	; 0x22
    21e4:	89 a3       	std	Y+33, r24	; 0x21
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <main+0x64a>
	else if (__tmp > 65535)
    21e8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ea:	7c a1       	ldd	r23, Y+36	; 0x24
    21ec:	8d a1       	ldd	r24, Y+37	; 0x25
    21ee:	9e a1       	ldd	r25, Y+38	; 0x26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	4f e7       	ldi	r20, 0x7F	; 127
    21f6:	57 e4       	ldi	r21, 0x47	; 71
    21f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <main+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	6f a1       	ldd	r22, Y+39	; 0x27
    2202:	78 a5       	ldd	r23, Y+40	; 0x28
    2204:	89 a5       	ldd	r24, Y+41	; 0x29
    2206:	9a a5       	ldd	r25, Y+42	; 0x2a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9a a3       	std	Y+34, r25	; 0x22
    2226:	89 a3       	std	Y+33, r24	; 0x21
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <main+0x62c>
    222a:	88 ec       	ldi	r24, 0xC8	; 200
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	98 a3       	std	Y+32, r25	; 0x20
    2230:	8f 8f       	std	Y+31, r24	; 0x1f
    2232:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2234:	98 a1       	ldd	r25, Y+32	; 0x20
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <main+0x61a>
    223a:	98 a3       	std	Y+32, r25	; 0x20
    223c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	89 a1       	ldd	r24, Y+33	; 0x21
    2240:	9a a1       	ldd	r25, Y+34	; 0x22
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9a a3       	std	Y+34, r25	; 0x22
    2246:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	89 a1       	ldd	r24, Y+33	; 0x21
    224a:	9a a1       	ldd	r25, Y+34	; 0x22
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	69 f7       	brne	.-38     	; 0x222a <main+0x60e>
    2250:	14 c0       	rjmp	.+40     	; 0x227a <main+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6b a1       	ldd	r22, Y+35	; 0x23
    2254:	7c a1       	ldd	r23, Y+36	; 0x24
    2256:	8d a1       	ldd	r24, Y+37	; 0x25
    2258:	9e a1       	ldd	r25, Y+38	; 0x26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9a a3       	std	Y+34, r25	; 0x22
    2264:	89 a3       	std	Y+33, r24	; 0x21
    2266:	89 a1       	ldd	r24, Y+33	; 0x21
    2268:	9a a1       	ldd	r25, Y+34	; 0x22
    226a:	9e 8f       	std	Y+30, r25	; 0x1e
    226c:	8d 8f       	std	Y+29, r24	; 0x1d
    226e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2270:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <main+0x656>
    2276:	9e 8f       	std	Y+30, r25	; 0x1e
    2278:	8d 8f       	std	Y+29, r24	; 0x1d
												_delay_ms(500);
												Local_u8KeyPressed = 255 ;
    227a:	fe 01       	movw	r30, r28
    227c:	e8 5a       	subi	r30, 0xA8	; 168
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	80 83       	st	Z, r24
												do
												{
												Local_u8KeyPressed = KPD_u8GetPressedKey();
    2284:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <KPD_u8GetPressedKey>
    2288:	fe 01       	movw	r30, r28
    228a:	e8 5a       	subi	r30, 0xA8	; 168
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 83       	st	Z, r24
												}while(Local_u8KeyPressed == 255 );
    2290:	fe 01       	movw	r30, r28
    2292:	e8 5a       	subi	r30, 0xA8	; 168
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	8f 3f       	cpi	r24, 0xFF	; 255
    229a:	a1 f3       	breq	.-24     	; 0x2284 <main+0x668>
												LCD_VoidSendCommand(DISPLAY_Clear);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
												LCD_VoidSendString("CHOICE ");
    22a2:	8d ea       	ldi	r24, 0xAD	; 173
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
												LCD_VoidGoto(LINE_2,1);
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
												LCD_VoidSendData(Local_u8KeyPressed);
    22b2:	fe 01       	movw	r30, r28
    22b4:	e8 5a       	subi	r30, 0xA8	; 168
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_VoidSendData>
												switch(Local_u8KeyPressed)
    22be:	fe 01       	movw	r30, r28
    22c0:	e8 5a       	subi	r30, 0xA8	; 168
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	6b 96       	adiw	r28, 0x1b	; 27
    22cc:	3f af       	std	Y+63, r19	; 0x3f
    22ce:	2e af       	std	Y+62, r18	; 0x3e
    22d0:	6b 97       	sbiw	r28, 0x1b	; 27
    22d2:	6b 96       	adiw	r28, 0x1b	; 27
    22d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22d8:	6b 97       	sbiw	r28, 0x1b	; 27
    22da:	81 33       	cpi	r24, 0x31	; 49
    22dc:	91 05       	cpc	r25, r1
    22de:	49 f0       	breq	.+18     	; 0x22f2 <main+0x6d6>
    22e0:	6b 96       	adiw	r28, 0x1b	; 27
    22e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    22e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    22e6:	6b 97       	sbiw	r28, 0x1b	; 27
    22e8:	e2 33       	cpi	r30, 0x32	; 50
    22ea:	f1 05       	cpc	r31, r1
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <main+0x6d4>
    22ee:	86 c0       	rjmp	.+268    	; 0x23fc <main+0x7e0>
    22f0:	f9 cd       	rjmp	.-1038   	; 0x1ee4 <main+0x2c8>
												{
													/*DC MOTOR MODE CW 	*/
													case '1' : DC_MOTOR_VoidDirection(CW);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <DC_MOTOR_VoidDirection>
													LCD_VoidSendCommand(DISPLAY_Clear);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
													LCD_VoidSendString("Motor ON");
    22fe:	84 ec       	ldi	r24, 0xC4	; 196
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
													LCD_VoidGoto(LINE_2,1);
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
													LCD_VoidSendString("CW ");
    230e:	8d ec       	ldi	r24, 0xCD	; 205
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	aa ef       	ldi	r26, 0xFA	; 250
    231c:	b4 e4       	ldi	r27, 0x44	; 68
    231e:	89 8f       	std	Y+25, r24	; 0x19
    2320:	9a 8f       	std	Y+26, r25	; 0x1a
    2322:	ab 8f       	std	Y+27, r26	; 0x1b
    2324:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	69 8d       	ldd	r22, Y+25	; 0x19
    2328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a ef       	ldi	r20, 0xFA	; 250
    2334:	54 e4       	ldi	r21, 0x44	; 68
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	8d 8b       	std	Y+21, r24	; 0x15
    2340:	9e 8b       	std	Y+22, r25	; 0x16
    2342:	af 8b       	std	Y+23, r26	; 0x17
    2344:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2346:	6d 89       	ldd	r22, Y+21	; 0x15
    2348:	7e 89       	ldd	r23, Y+22	; 0x16
    234a:	8f 89       	ldd	r24, Y+23	; 0x17
    234c:	98 8d       	ldd	r25, Y+24	; 0x18
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <main+0x74c>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9c 8b       	std	Y+20, r25	; 0x14
    2364:	8b 8b       	std	Y+19, r24	; 0x13
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <main+0x7ca>
	else if (__tmp > 65535)
    2368:	6d 89       	ldd	r22, Y+21	; 0x15
    236a:	7e 89       	ldd	r23, Y+22	; 0x16
    236c:	8f 89       	ldd	r24, Y+23	; 0x17
    236e:	98 8d       	ldd	r25, Y+24	; 0x18
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <main+0x7b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	69 8d       	ldd	r22, Y+25	; 0x19
    2382:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2384:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2386:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9c 8b       	std	Y+20, r25	; 0x14
    23a6:	8b 8b       	std	Y+19, r24	; 0x13
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <main+0x7ac>
    23aa:	88 ec       	ldi	r24, 0xC8	; 200
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9a 8b       	std	Y+18, r25	; 0x12
    23b0:	89 8b       	std	Y+17, r24	; 0x11
    23b2:	89 89       	ldd	r24, Y+17	; 0x11
    23b4:	9a 89       	ldd	r25, Y+18	; 0x12
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <main+0x79a>
    23ba:	9a 8b       	std	Y+18, r25	; 0x12
    23bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	9c 8b       	std	Y+20, r25	; 0x14
    23c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ca:	9c 89       	ldd	r25, Y+20	; 0x14
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <main+0x78e>
    23d0:	89 cd       	rjmp	.-1262   	; 0x1ee4 <main+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	6d 89       	ldd	r22, Y+21	; 0x15
    23d4:	7e 89       	ldd	r23, Y+22	; 0x16
    23d6:	8f 89       	ldd	r24, Y+23	; 0x17
    23d8:	98 8d       	ldd	r25, Y+24	; 0x18
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9c 8b       	std	Y+20, r25	; 0x14
    23e4:	8b 8b       	std	Y+19, r24	; 0x13
    23e6:	8b 89       	ldd	r24, Y+19	; 0x13
    23e8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ea:	98 8b       	std	Y+16, r25	; 0x10
    23ec:	8f 87       	std	Y+15, r24	; 0x0f
    23ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f0:	98 89       	ldd	r25, Y+16	; 0x10
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <main+0x7d6>
    23f6:	98 8b       	std	Y+16, r25	; 0x10
    23f8:	8f 87       	std	Y+15, r24	; 0x0f
    23fa:	74 cd       	rjmp	.-1304   	; 0x1ee4 <main+0x2c8>
													_delay_ms(2000);
																break ;
													case '2' : DC_MOTOR_VoidDirection(CCW);
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <DC_MOTOR_VoidDirection>
													LCD_VoidSendCommand(DISPLAY_Clear);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
													LCD_VoidSendString("Motor ON");
    2408:	84 ec       	ldi	r24, 0xC4	; 196
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
													LCD_VoidGoto(LINE_2,1);
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	61 e0       	ldi	r22, 0x01	; 1
    2414:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
													LCD_VoidSendString("CCW ");
    2418:	81 ed       	ldi	r24, 0xD1	; 209
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	aa ef       	ldi	r26, 0xFA	; 250
    2426:	b4 e4       	ldi	r27, 0x44	; 68
    2428:	8b 87       	std	Y+11, r24	; 0x0b
    242a:	9c 87       	std	Y+12, r25	; 0x0c
    242c:	ad 87       	std	Y+13, r26	; 0x0d
    242e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2430:	6b 85       	ldd	r22, Y+11	; 0x0b
    2432:	7c 85       	ldd	r23, Y+12	; 0x0c
    2434:	8d 85       	ldd	r24, Y+13	; 0x0d
    2436:	9e 85       	ldd	r25, Y+14	; 0x0e
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a ef       	ldi	r20, 0xFA	; 250
    243e:	54 e4       	ldi	r21, 0x44	; 68
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	8f 83       	std	Y+7, r24	; 0x07
    244a:	98 87       	std	Y+8, r25	; 0x08
    244c:	a9 87       	std	Y+9, r26	; 0x09
    244e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e8       	ldi	r20, 0x80	; 128
    245e:	5f e3       	ldi	r21, 0x3F	; 63
    2460:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2464:	88 23       	and	r24, r24
    2466:	2c f4       	brge	.+10     	; 0x2472 <main+0x856>
		__ticks = 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	3f c0       	rjmp	.+126    	; 0x24f0 <main+0x8d4>
	else if (__tmp > 65535)
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	4c f5       	brge	.+82     	; 0x24dc <main+0x8c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <main+0x8b6>
    24b4:	88 ec       	ldi	r24, 0xC8	; 200
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <main+0x8a4>
    24c4:	9c 83       	std	Y+4, r25	; 0x04
    24c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	69 f7       	brne	.-38     	; 0x24b4 <main+0x898>
    24da:	04 cd       	rjmp	.-1528   	; 0x1ee4 <main+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <main+0x8e0>
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	ef cc       	rjmp	.-1570   	; 0x1ee4 <main+0x2c8>
												break;
							}
						}
						else
						{
							Local_u8KeyPressed = 255 ;
    2506:	fe 01       	movw	r30, r28
    2508:	e8 5a       	subi	r30, 0xA8	; 168
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	8f ef       	ldi	r24, 0xFF	; 255
    250e:	80 83       	st	Z, r24
    2510:	a5 cb       	rjmp	.-2230   	; 0x1c5c <main+0x40>
							break ;
						}
					}
				}
				else if (counter !=4) {
    2512:	fe 01       	movw	r30, r28
    2514:	eb 5a       	subi	r30, 0xAB	; 171
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	84 30       	cpi	r24, 0x04	; 4
    251c:	09 f4       	brne	.+2      	; 0x2520 <main+0x904>
    251e:	9e cb       	rjmp	.-2244   	; 0x1c5c <main+0x40>
					LCD_VoidGoto(LINE_2,1);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_VoidGoto>
					LCD_VoidSendCommand(DISPLAY_Clear);
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
					loopbreaker ++ ;
    252e:	80 91 18 01 	lds	r24, 0x0118
    2532:	8f 5f       	subi	r24, 0xFF	; 255
    2534:	80 93 18 01 	sts	0x0118, r24
					if(loopbreaker ==3 )
    2538:	80 91 18 01 	lds	r24, 0x0118
    253c:	83 30       	cpi	r24, 0x03	; 3
    253e:	a9 f4       	brne	.+42     	; 0x256a <main+0x94e>
					{
						LCD_VoidSendCommand(DISPLAY_Clear);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_VoidSendCommand>
						LCD_VoidSendString("No more tries ");
    2546:	86 ed       	ldi	r24, 0xD6	; 214
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
					}
					LCD_VoidSendString("Try Again ");
				}
			}
	}
}
    2552:	c6 5a       	subi	r28, 0xA6	; 166
    2554:	df 4f       	sbci	r29, 0xFF	; 255
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret
						LCD_VoidSendCommand(DISPLAY_Clear);
						LCD_VoidSendString("No more tries ");

						break;
					}
					LCD_VoidSendString("Try Again ");
    256a:	85 ee       	ldi	r24, 0xE5	; 229
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LCD_VoidSendString>
    2572:	74 cb       	rjmp	.-2328   	; 0x1c5c <main+0x40>

00002574 <__udivmodhi4>:
    2574:	aa 1b       	sub	r26, r26
    2576:	bb 1b       	sub	r27, r27
    2578:	51 e1       	ldi	r21, 0x11	; 17
    257a:	07 c0       	rjmp	.+14     	; 0x258a <__udivmodhi4_ep>

0000257c <__udivmodhi4_loop>:
    257c:	aa 1f       	adc	r26, r26
    257e:	bb 1f       	adc	r27, r27
    2580:	a6 17       	cp	r26, r22
    2582:	b7 07       	cpc	r27, r23
    2584:	10 f0       	brcs	.+4      	; 0x258a <__udivmodhi4_ep>
    2586:	a6 1b       	sub	r26, r22
    2588:	b7 0b       	sbc	r27, r23

0000258a <__udivmodhi4_ep>:
    258a:	88 1f       	adc	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	5a 95       	dec	r21
    2590:	a9 f7       	brne	.-22     	; 0x257c <__udivmodhi4_loop>
    2592:	80 95       	com	r24
    2594:	90 95       	com	r25
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	08 95       	ret

0000259c <__prologue_saves__>:
    259c:	2f 92       	push	r2
    259e:	3f 92       	push	r3
    25a0:	4f 92       	push	r4
    25a2:	5f 92       	push	r5
    25a4:	6f 92       	push	r6
    25a6:	7f 92       	push	r7
    25a8:	8f 92       	push	r8
    25aa:	9f 92       	push	r9
    25ac:	af 92       	push	r10
    25ae:	bf 92       	push	r11
    25b0:	cf 92       	push	r12
    25b2:	df 92       	push	r13
    25b4:	ef 92       	push	r14
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	ca 1b       	sub	r28, r26
    25c6:	db 0b       	sbc	r29, r27
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	09 94       	ijmp

000025d4 <__epilogue_restores__>:
    25d4:	2a 88       	ldd	r2, Y+18	; 0x12
    25d6:	39 88       	ldd	r3, Y+17	; 0x11
    25d8:	48 88       	ldd	r4, Y+16	; 0x10
    25da:	5f 84       	ldd	r5, Y+15	; 0x0f
    25dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    25de:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    25e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e6:	b9 84       	ldd	r11, Y+9	; 0x09
    25e8:	c8 84       	ldd	r12, Y+8	; 0x08
    25ea:	df 80       	ldd	r13, Y+7	; 0x07
    25ec:	ee 80       	ldd	r14, Y+6	; 0x06
    25ee:	fd 80       	ldd	r15, Y+5	; 0x05
    25f0:	0c 81       	ldd	r16, Y+4	; 0x04
    25f2:	1b 81       	ldd	r17, Y+3	; 0x03
    25f4:	aa 81       	ldd	r26, Y+2	; 0x02
    25f6:	b9 81       	ldd	r27, Y+1	; 0x01
    25f8:	ce 0f       	add	r28, r30
    25fa:	d1 1d       	adc	r29, r1
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	ed 01       	movw	r28, r26
    2608:	08 95       	ret

0000260a <_exit>:
    260a:	f8 94       	cli

0000260c <__stop_program>:
    260c:	ff cf       	rjmp	.-2      	; 0x260c <__stop_program>
